<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harley</title>
    <link>https://harleylau.github.io/</link>
    <description>Recent content on Harley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Jan 2019 16:46:31 +0800</lastBuildDate>
    
	<atom:link href="https://harleylau.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Redis SETNX 命令实现分布式锁</title>
      <link>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis-setnx-%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Tue, 01 Jan 2019 16:46:31 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis-setnx-%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>&lt;p&gt;使用Redis的 SETNX 命令可以实现分布式锁，本文介绍其实现方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HBase Rowkey 设计</title>
      <link>https://harleylau.github.io/2019/01/hbase-rowkey-%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 01 Jan 2019 15:39:35 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/01/hbase-rowkey-%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;!-- toc --&gt;

&lt;p&gt;HBase中的rowkey唯一的决定了一行数据，使用HBase的场景多种多样， rowkey设计的好坏很大程度上决定了应用场景中的执行效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从hexo转到hugo</title>
      <link>https://harleylau.github.io/2018/12/%E4%BB%8Ehexo%E8%BD%AC%E5%88%B0hugo/</link>
      <pubDate>Thu, 27 Dec 2018 09:08:09 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/12/%E4%BB%8Ehexo%E8%BD%AC%E5%88%B0hugo/</guid>
      <description>之前的博客都是用hexo生成的，也不是不好用， 只是对于js并不是很熟悉。正好最近一直在用golang，也顺便把原来的博客从hexo转到hugo上来。
接下去会慢慢的把之前的文章都重新部署一下。</description>
    </item>
    
    <item>
      <title>分布式系统的CAP理论和BASE理论</title>
      <link>https://harleylau.github.io/2018/05/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84cap%E7%90%86%E8%AE%BA%E5%92%8Cbase%E7%90%86%E8%AE%BA/</link>
      <pubDate>Fri, 25 May 2018 14:20:39 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/05/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84cap%E7%90%86%E8%AE%BA%E5%92%8Cbase%E7%90%86%E8%AE%BA/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;现在分布式系统的应用越来越广， 这是一个很容易理解的趋势， 因为毕竟单机的性能是有限的， 在量级还不大的时候， 我们能够通过升级机器的性能来支撑服务。但是当量级到达一定的瓶颈， 单机的性能总会有撑不住的时候， 这个时候就需要使用分布式系统了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–字符串t_string实现</title>
      <link>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%97%E7%AC%A6%E4%B8%B2t_string%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 09 May 2018 10:12:07 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%97%E7%AC%A6%E4%B8%B2t_string%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;介绍完Redis的底层数据结构之后， 介绍我们平时使用Redis的时候可以直接看到五种数据结构：字符串、哈希、链表、集合和有序集合。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx内置的负载均衡策略 加权轮询 (Weighted Round Robin)</title>
      <link>https://harleylau.github.io/2018/04/nginx%E5%86%85%E7%BD%AE%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5-%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2-weighted-round-robin/</link>
      <pubDate>Mon, 30 Apr 2018 23:18:49 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/04/nginx%E5%86%85%E7%BD%AE%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5-%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2-weighted-round-robin/</guid>
      <description>&lt;p&gt;Nginx中设置反向代理的时候，能够指定反向代理中每一个后端服务器所占的比重， 起到负载均衡的作用， 看一个反向代理的例子：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSA算法padding方式</title>
      <link>https://harleylau.github.io/2018/04/rsa%E7%AE%97%E6%B3%95padding%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 28 Apr 2018 10:24:14 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/04/rsa%E7%AE%97%E6%B3%95padding%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;在开发过程中，发现iOS端经过RSA加密的密文传到服务端之后， 服务端无法解析，本来想通过比较同一段明文的加密结果，来判断服务端和iOS端加密方式的区别，结果发现加密结果一直不一样。然后服务端尝试多次加密同一段明文，得到的结果也不一样。 &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx下limit_req模块限制访问频次</title>
      <link>https://harleylau.github.io/2018/04/nginx%E4%B8%8Blimit_req%E6%A8%A1%E5%9D%97%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE%E9%A2%91%E6%AC%A1/</link>
      <pubDate>Wed, 18 Apr 2018 12:29:28 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/04/nginx%E4%B8%8Blimit_req%E6%A8%A1%E5%9D%97%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE%E9%A2%91%E6%AC%A1/</guid>
      <description>&lt;p&gt;最近实际开发过程中，发现部分服务资源访问503 Service Temporarily Unavailable，查找后证实是在对nginx做了限速以后，限速做的太低了超过访问次数直接拒绝访问返回503错误。
nginx 可以使用ngx_http_limit_req对服务器资源请求进行限制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado并行执行多个异步请求</title>
      <link>https://harleylau.github.io/2018/04/tornado%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Wed, 11 Apr 2018 11:25:22 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/04/tornado%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Tornado实现后台逻辑的时候，可能遇到这样的情况： 需要同时请求多个第三方数据，比如同时从多个网址请求数据，而这几个第三方数据相互没有关联。 最简单的方式是写多个yield，第一个yield返回结果之后，继续请求第二个yield。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado Websocket实现二维码扫描</title>
      <link>https://harleylau.github.io/2018/02/tornado-websocket%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F/</link>
      <pubDate>Mon, 12 Feb 2018 12:17:11 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/02/tornado-websocket%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F/</guid>
      <description>&lt;!--toc--&gt;</description>
    </item>
    
    <item>
      <title>Tornado之WebSocket</title>
      <link>https://harleylau.github.io/2018/02/tornado%E4%B9%8Bwebsocket/</link>
      <pubDate>Mon, 12 Feb 2018 11:29:39 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/02/tornado%E4%B9%8Bwebsocket/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。 WebSocket通信协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。 在WebSocket API中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTPS通配证书</title>
      <link>https://harleylau.github.io/2017/11/https%E9%80%9A%E9%85%8D%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Wed, 01 Nov 2017 18:46:50 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/11/https%E9%80%9A%E9%85%8D%E8%AF%81%E4%B9%A6/</guid>
      <description>&lt;p&gt;HTTPS的通配证书有一些限制条件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 处理XML转为json</title>
      <link>https://harleylau.github.io/2017/11/python-%E5%A4%84%E7%90%86xml%E8%BD%AC%E4%B8%BAjson/</link>
      <pubDate>Wed, 01 Nov 2017 12:39:11 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/11/python-%E5%A4%84%E7%90%86xml%E8%BD%AC%E4%B8%BAjson/</guid>
      <description>&lt;p&gt;Python中虽然有ElementTree等来处理xml格式，但是总是感觉不如json处理来的方便.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado Websocket调用时出现403错误</title>
      <link>https://harleylau.github.io/2017/10/tornado-websocket%E8%B0%83%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0403%E9%94%99%E8%AF%AF/</link>
      <pubDate>Mon, 30 Oct 2017 10:10:55 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/10/tornado-websocket%E8%B0%83%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0403%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;p&gt;tornado websocket 实现的时候，调用可能出现403的错误 &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–对象Object</title>
      <link>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AF%B9%E8%B1%A1object/</link>
      <pubDate>Thu, 07 Sep 2017 18:20:21 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AF%B9%E8%B1%A1object/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;之前介绍的都是Redis的基础数据结构，比如简单动态字符串（SDS）、双端链表、字典、压缩列表、整数集合， 等等，不过Redis并没有直接用这些结构来实现键值对的数据库，而是对其进行了封装， 所有的键和值都是用对象Object来表示的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado–打印block日志</title>
      <link>https://harleylau.github.io/2017/09/tornado%E6%89%93%E5%8D%B0block%E6%97%A5%E5%BF%97/</link>
      <pubDate>Thu, 07 Sep 2017 11:21:02 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/tornado%E6%89%93%E5%8D%B0block%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;p&gt;Tornado在使用过程，碰到过性能瓶颈。 当碰到Tornado中有比较耗时的任务的时候，请求一多就会阻塞整个服务。这个时候就需要查看到底是什么任务阻塞了服务，然后针对性的进行优化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–压缩列表</title>
      <link>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 05 Sep 2017 09:51:55 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;压缩列表（ziplist）是列表键和哈希键的底层实现之一。
Redis的列表键，哈希键，有序集合的底层实现都用到了ziplist。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–整数集合</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</link>
      <pubDate>Tue, 29 Aug 2017 17:44:28 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;整数集合（intset）是集合键的底层实现之一： 当一个集合只包含整数值元素， 并且这个集合的元素数量不多时， Redis 就会使用整数集合作为集合键的底层实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–跳跃表</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%B7%B3%E8%B7%83%E8%A1%A8/</link>
      <pubDate>Thu, 24 Aug 2017 10:46:04 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%B7%B3%E8%B7%83%E8%A1%A8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;跳跃表（skiplist）是一种有序数据结构， 它通过在每个节点中维持多个指向其他节点的指针， 从而达到快速访问节点的目的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-Dict遍历算法</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 02 Aug 2017 16:08:16 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;先贴一下整体的代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-Dict字典</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E5%AD%97%E5%85%B8/</link>
      <pubDate>Mon, 31 Jul 2017 16:36:53 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E5%AD%97%E5%85%B8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;改换一下策略，不直接介绍源码，打算先整体介绍一下思路，然后再根据源码解释具体的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-链表list</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%93%BE%E8%A1%A8list/</link>
      <pubDate>Mon, 31 Jul 2017 12:15:30 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%93%BE%E8%A1%A8list/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Redis另一个基础的数据结构是链表，C并没有内置的链表结构，因此Redis自己实现了一个列表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–简单动态字符串sds</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds/</link>
      <pubDate>Fri, 28 Jul 2017 16:14:49 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Redis 没有直接使用 C 语言传统的字符串表示， 而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型， 并将 SDS 用作 Redis 的默认字符串表示。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado 线程池应用</title>
      <link>https://harleylau.github.io/2017/07/tornado-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 25 Jul 2017 08:54:31 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/tornado-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;Tornado是一个异步框架，在异步操作的时候能提升程序的处理性能。但是如果在程序中碰到同步的逻辑，由于GIL的关系，会直接卡死，导致性能急剧下降。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Json Web Token</title>
      <link>https://harleylau.github.io/2017/07/json-web-token/</link>
      <pubDate>Tue, 25 Jul 2017 08:46:38 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/json-web-token/</guid>
      <description>&lt;p&gt;JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>