<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harley</title>
    <link>https://harleylau.github.io/</link>
    <description>Recent content on Harley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Jan 2019 16:46:31 +0800</lastBuildDate>
    
	<atom:link href="https://harleylau.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Redis SETNX 命令实现分布式锁</title>
      <link>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis-setnx-%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Tue, 01 Jan 2019 16:46:31 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis-setnx-%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>&lt;p&gt;使用Redis的 SETNX 命令可以实现分布式锁，本文介绍其实现方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HBase Rowkey 设计</title>
      <link>https://harleylau.github.io/2019/01/hbase-rowkey-%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 01 Jan 2019 15:39:35 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/01/hbase-rowkey-%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;!-- toc --&gt;

&lt;p&gt;HBase中的rowkey唯一的决定了一行数据，使用HBase的场景多种多样， rowkey设计的好坏很大程度上决定了应用场景中的执行效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从hexo转到hugo</title>
      <link>https://harleylau.github.io/2018/12/%E4%BB%8Ehexo%E8%BD%AC%E5%88%B0hugo/</link>
      <pubDate>Thu, 27 Dec 2018 09:08:09 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/12/%E4%BB%8Ehexo%E8%BD%AC%E5%88%B0hugo/</guid>
      <description>之前的博客都是用hexo生成的，也不是不好用， 只是对于js并不是很熟悉。正好最近一直在用golang，也顺便把原来的博客从hexo转到hugo上来。
接下去会慢慢的把之前的文章都重新部署一下。</description>
    </item>
    
    <item>
      <title>Tornado–打印block日志</title>
      <link>https://harleylau.github.io/2017/09/tornado%E6%89%93%E5%8D%B0block%E6%97%A5%E5%BF%97/</link>
      <pubDate>Thu, 07 Sep 2017 11:21:02 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/tornado%E6%89%93%E5%8D%B0block%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;p&gt;Tornado在使用过程，碰到过性能瓶颈。 当碰到Tornado中有比较耗时的任务的时候，请求一多就会阻塞整个服务。这个时候就需要查看到底是什么任务阻塞了服务，然后针对性的进行优化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–压缩列表</title>
      <link>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 05 Sep 2017 09:51:55 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;压缩列表（ziplist）是列表键和哈希键的底层实现之一。
Redis的列表键，哈希键，有序集合的底层实现都用到了ziplist。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–整数集合</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</link>
      <pubDate>Tue, 29 Aug 2017 17:44:28 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;整数集合（intset）是集合键的底层实现之一： 当一个集合只包含整数值元素， 并且这个集合的元素数量不多时， Redis 就会使用整数集合作为集合键的底层实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–跳跃表</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%B7%B3%E8%B7%83%E8%A1%A8/</link>
      <pubDate>Thu, 24 Aug 2017 10:46:04 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%B7%B3%E8%B7%83%E8%A1%A8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;跳跃表（skiplist）是一种有序数据结构， 它通过在每个节点中维持多个指向其他节点的指针， 从而达到快速访问节点的目的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-Dict遍历算法</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 02 Aug 2017 16:08:16 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;先贴一下整体的代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-Dict字典</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E5%AD%97%E5%85%B8/</link>
      <pubDate>Mon, 31 Jul 2017 16:36:53 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E5%AD%97%E5%85%B8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;改换一下策略，不直接介绍源码，打算先整体介绍一下思路，然后再根据源码解释具体的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-链表list</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%93%BE%E8%A1%A8list/</link>
      <pubDate>Mon, 31 Jul 2017 12:15:30 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%93%BE%E8%A1%A8list/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Redis另一个基础的数据结构是链表，C并没有内置的链表结构，因此Redis自己实现了一个列表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–简单动态字符串sds</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds/</link>
      <pubDate>Fri, 28 Jul 2017 16:14:49 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Redis 没有直接使用 C 语言传统的字符串表示， 而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型， 并将 SDS 用作 Redis 的默认字符串表示。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado 线程池应用</title>
      <link>https://harleylau.github.io/2017/07/tornado-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 25 Jul 2017 08:54:31 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/tornado-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;Tornado是一个异步框架，在异步操作的时候能提升程序的处理性能。但是如果在程序中碰到同步的逻辑，由于GIL的关系，会直接卡死，导致性能急剧下降。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Json Web Token</title>
      <link>https://harleylau.github.io/2017/07/json-web-token/</link>
      <pubDate>Tue, 25 Jul 2017 08:46:38 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/json-web-token/</guid>
      <description>&lt;p&gt;JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>