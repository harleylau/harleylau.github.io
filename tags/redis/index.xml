<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Harley</title>
    <link>https://harleylau.github.io/tags/redis/</link>
    <description>Recent content in Redis on Harley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Mar 2019 11:29:48 +0800</lastBuildDate>
    
	<atom:link href="https://harleylau.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis源码剖析  有序集合对象t_zset实现</title>
      <link>https://harleylau.github.io/2019/03/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1t_zset%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 28 Mar 2019 11:29:48 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/03/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1t_zset%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;!--toc--&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析  集合对象t_set实现</title>
      <link>https://harleylau.github.io/2019/03/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1t_set%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 27 Mar 2019 14:17:29 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/03/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1t_set%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;!--toc--&gt;</description>
    </item>
    
    <item>
      <title>如何处理redis集群中的hot Key</title>
      <link>https://harleylau.github.io/2019/01/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86redis%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84hot-key/</link>
      <pubDate>Thu, 10 Jan 2019 17:39:10 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/01/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86redis%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84hot-key/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;一般对于单实例的redis或者一主一备的redis来说，不需要考虑hot key的问题。但是随着业务量的上升，redis集群也自然而然的会成为一个选择。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Redis的分布式锁</title>
      <link>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Sat, 05 Jan 2019 19:17:34 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>&lt;p&gt;译自： &lt;a href=&#34;https://redis.io/topics/distlock#the-redlock-algorithm&#34;&gt;https://redis.io/topics/distlock#the-redlock-algorithm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在许多环境中，分布式锁是一种非常有用的原语，其中不同的进程必须以互斥的方式与共享资源一起运行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Redis SETNX 命令实现分布式锁</title>
      <link>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis-setnx-%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Tue, 01 Jan 2019 16:46:31 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2019/01/%E4%BD%BF%E7%94%A8redis-setnx-%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>&lt;p&gt;使用Redis的 SETNX 命令可以实现分布式锁，本文介绍其实现方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–哈希对象t_hash实现</title>
      <link>https://harleylau.github.io/2018/06/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%93%88%E5%B8%8C%E5%AF%B9%E8%B1%A1t_hash%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 04 Jun 2018 10:29:07 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/06/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%93%88%E5%B8%8C%E5%AF%B9%E8%B1%A1t_hash%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;!--toc--&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–quicklist</title>
      <link>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90quicklist/</link>
      <pubDate>Thu, 31 May 2018 09:43:09 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90quicklist/</guid>
      <description>&lt;!--toc--&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–列表t_list实现</title>
      <link>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%88%97%E8%A1%A8t_list%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 10 May 2018 09:53:08 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%88%97%E8%A1%A8t_list%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Redis中的列表对象比较特殊，在版本3.2之前，列表底层的编码是 ziplist 和 linkedlist 实现的， 但是在版本3.2之后，重新引入了一个 quicklist 的数据结构，列表的底层都由quicklist实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–字符串t_string实现</title>
      <link>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%97%E7%AC%A6%E4%B8%B2t_string%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 09 May 2018 10:12:07 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/05/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%97%E7%AC%A6%E4%B8%B2t_string%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;介绍完Redis的底层数据结构之后， 介绍我们平时使用Redis的时候可以直接看到五种数据结构：字符串、哈希、链表、集合和有序集合。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–对象Object</title>
      <link>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AF%B9%E8%B1%A1object/</link>
      <pubDate>Thu, 07 Sep 2017 18:20:21 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%AF%B9%E8%B1%A1object/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;之前介绍的都是Redis的基础数据结构，比如简单动态字符串（SDS）、双端链表、字典、压缩列表、整数集合， 等等，不过Redis并没有直接用这些结构来实现键值对的数据库，而是对其进行了封装， 所有的键和值都是用对象Object来表示的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–压缩列表</title>
      <link>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 05 Sep 2017 09:51:55 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;压缩列表（ziplist）是列表键和哈希键的底层实现之一。
Redis的列表键，哈希键，有序集合的底层实现都用到了ziplist。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–整数集合</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</link>
      <pubDate>Tue, 29 Aug 2017 17:44:28 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;整数集合（intset）是集合键的底层实现之一： 当一个集合只包含整数值元素， 并且这个集合的元素数量不多时， Redis 就会使用整数集合作为集合键的底层实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–跳跃表</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%B7%B3%E8%B7%83%E8%A1%A8/</link>
      <pubDate>Thu, 24 Aug 2017 10:46:04 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%B7%B3%E8%B7%83%E8%A1%A8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;跳跃表（skiplist）是一种有序数据结构， 它通过在每个节点中维持多个指向其他节点的指针， 从而达到快速访问节点的目的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-Dict遍历算法</title>
      <link>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 02 Aug 2017 16:08:16 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/08/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;先贴一下整体的代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-Dict字典</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E5%AD%97%E5%85%B8/</link>
      <pubDate>Mon, 31 Jul 2017 16:36:53 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-dict%E5%AD%97%E5%85%B8/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;改换一下策略，不直接介绍源码，打算先整体介绍一下思路，然后再根据源码解释具体的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析-链表list</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%93%BE%E8%A1%A8list/</link>
      <pubDate>Mon, 31 Jul 2017 12:15:30 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%93%BE%E8%A1%A8list/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Redis另一个基础的数据结构是链表，C并没有内置的链表结构，因此Redis自己实现了一个列表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis源码剖析–简单动态字符串sds</title>
      <link>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds/</link>
      <pubDate>Fri, 28 Jul 2017 16:14:49 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/redis%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Redis 没有直接使用 C 语言传统的字符串表示， 而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型， 并将 SDS 用作 Redis 的默认字符串表示。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>