<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tornado on Harley</title>
    <link>https://harleylau.github.io/tags/tornado/</link>
    <description>Recent content in Tornado on Harley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jul 2018 10:07:59 +0800</lastBuildDate>
    
	<atom:link href="https://harleylau.github.io/tags/tornado/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tornado启动流程分析</title>
      <link>https://harleylau.github.io/2018/07/tornado%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 12 Jul 2018 10:07:59 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/07/tornado%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;我们先来看一下所有地方都会出现的Hello World的例子：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado并行执行多个异步请求</title>
      <link>https://harleylau.github.io/2018/04/tornado%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Wed, 11 Apr 2018 11:25:22 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/04/tornado%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;Tornado实现后台逻辑的时候，可能遇到这样的情况： 需要同时请求多个第三方数据，比如同时从多个网址请求数据，而这几个第三方数据相互没有关联。 最简单的方式是写多个yield，第一个yield返回结果之后，继续请求第二个yield。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado Websocket实现二维码扫描</title>
      <link>https://harleylau.github.io/2018/02/tornado-websocket%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F/</link>
      <pubDate>Mon, 12 Feb 2018 12:17:11 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/02/tornado-websocket%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F/</guid>
      <description>&lt;!--toc--&gt;</description>
    </item>
    
    <item>
      <title>Tornado之WebSocket</title>
      <link>https://harleylau.github.io/2018/02/tornado%E4%B9%8Bwebsocket/</link>
      <pubDate>Mon, 12 Feb 2018 11:29:39 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2018/02/tornado%E4%B9%8Bwebsocket/</guid>
      <description>&lt;!--toc--&gt;

&lt;p&gt;WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。 WebSocket通信协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。 在WebSocket API中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado Websocket调用时出现403错误</title>
      <link>https://harleylau.github.io/2017/10/tornado-websocket%E8%B0%83%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0403%E9%94%99%E8%AF%AF/</link>
      <pubDate>Mon, 30 Oct 2017 10:10:55 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/10/tornado-websocket%E8%B0%83%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0403%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;p&gt;tornado websocket 实现的时候，调用可能出现403的错误 &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado–打印block日志</title>
      <link>https://harleylau.github.io/2017/09/tornado%E6%89%93%E5%8D%B0block%E6%97%A5%E5%BF%97/</link>
      <pubDate>Thu, 07 Sep 2017 11:21:02 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/09/tornado%E6%89%93%E5%8D%B0block%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;p&gt;Tornado在使用过程，碰到过性能瓶颈。 当碰到Tornado中有比较耗时的任务的时候，请求一多就会阻塞整个服务。这个时候就需要查看到底是什么任务阻塞了服务，然后针对性的进行优化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tornado 线程池应用</title>
      <link>https://harleylau.github.io/2017/07/tornado-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 25 Jul 2017 08:54:31 +0800</pubDate>
      
      <guid>https://harleylau.github.io/2017/07/tornado-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;Tornado是一个异步框架，在异步操作的时候能提升程序的处理性能。但是如果在程序中碰到同步的逻辑，由于GIL的关系，会直接卡死，导致性能急剧下降。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>